buildscript {
	ext {
		kotlinVersion = '1.3.10'
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

plugins {
	id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.thorgil'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')

	testCompile('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
	}
	testCompile("com.nhaarman:mockito-kotlin:1.6.0")
	testImplementation('org.junit.jupiter:junit-jupiter-api')
	testImplementation('io.mockk:mockk:1.8.5')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.2.RELEASE'
	testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.2.RELEASE'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}
